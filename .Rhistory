for(x in 1:length(termVector1)){
anc1 <- listOnt[[GOINFO$description[[termVector1[x]]]@Ontology]][[termVector1[x]]]
anc1 <- anc1[anc1!="all"]
anc1 <- c(anc1,termVector1)
for(y in 1:length(termVector2)){
common <- anc1[anc1%in%c(listOnt[[GOINFO$description[[termVector2[y]]]@Ontology]][[termVector2[y]]], termVector2[y])]
mica <- mostInfoTerm(common,GOINFO)
print(paste(termVector1[x], termVector2[y],mica, sep="-"))
ssm[x,y] = lin.similarity(termVector1[x],termVector2[y],mica,GOINFO)
}
}
return(ssm)
}
termVector1 = c("GO:0008022","GO:0106151","GO:0047485")
termVector2 = c("GO:0043221","GO:0106151","GO:0030551")
mSemSim(termVector1 ,termVector2,GOINFO)
go1 = c("GO:0004022","GO:0004024","GO:0004174")
go2 = c("GO:0009055","GO:0005515")
mSemSim(go1 ,go2,GOINFO)
t <- mSemSim(go1 ,go2,GOINFO)
mean(t)
BMA <- function(SimScores){
return(sum( apply(SimScores, 1, max, na.rm=TRUE),
apply(SimScores, 2, max, na.rm=TRUE)
) / sum(dim(SimScores)))
}
BMA(t)
rcmax <- function(SimScores){
rowScore <- mean(apply(SimScores, 1, max, na.rm=TRUE))
colScore <- mean(apply(SimScores, 2, max, na.rm=TRUE))
result   <- max(rowScore, colScore)
}
rcmax(t)
rcmax <- function(SimScores){
rowScore <- mean(apply(SimScores, 1, max, na.rm=TRUE))
colScore <- mean(apply(SimScores, 2, max, na.rm=TRUE))
return(max(rowScore, colScore))
}
rcmax(t)
computeIC <- function(){
require(GO.db)
terms <- as.list(GOTERM)
listOnt <- list()
listOnt[["MF"]] <-  as.list(GOMFOFFSPRING)
listOnt[["BP"]] <-  as.list(GOBPOFFSPRING)
listOnt[["CC"]] <-  as.list(GOCCOFFSPRING)
topProb <- list()
mf.terms <- listOnt[["MF"]][["GO:0003674"]]
bp.terms <- listOnt[["BP"]][["GO:0008150"]]
cc.terms <- listOnt[["CC"]][["GO:0005575"]]
topProb[["MF"]]  = log(length(mf.terms))
topProb[["BP"]]  = log(length(bp.terms))
topProb[["CC"]]  = log(length(cc.terms))
icL <- lapply(terms, function(x){
res = 1 - log(length(listOnt[[x@Ontology]][[x@GOID]]))/topProb[[x@Ontology]]
return(res)
})
GOINFO <- list("description" = terms, "ics"=icL)
return(GOINFO)
}
lin.similarity <- function(term1, term2, mica, GOINFO){
if(is.null(mica)){
return(0)
}else{
return(2*GOINFO$ics[[mica]]/(GOINFO$ics[[term1]]+GOINFO$ics[[term2]]))
}
}
mostInfoTerm <- function(termVector, GOINFO){
ics <- unlist(lapply(termVector, function(x){
return(GOINFO$ics[[x]])
}))
names(ics)= termVector
return(names(ics[which.max(ics)]))
}
mSemSim <- function(termVector1, termVector2, GOINFO){
require(GO.db)
listOnt <- list()
listOnt[["MF"]] <-  as.list(GOMFANCESTOR)
listOnt[["BP"]] <-  as.list(GOBPANCESTOR)
listOnt[["CC"]] <-  as.list(GOCCANCESTOR)
ssm <- matrix(nrow=length(termVector1),ncol=length(termVector2))
row.names(ssm)=termVector1
colnames(ssm)=termVector2
for(x in 1:length(termVector1)){
anc1 <- listOnt[[GOINFO$description[[termVector1[x]]]@Ontology]][[termVector1[x]]]
anc1 <- anc1[anc1!="all"]
anc1 <- c(anc1,termVector1)
for(y in 1:length(termVector2)){
common <- anc1[anc1%in%c(listOnt[[GOINFO$description[[termVector2[y]]]@Ontology]][[termVector2[y]]], termVector2[y])]
mica <- mostInfoTerm(common,GOINFO)
ssm[x,y] = lin.similarity(termVector1[x],termVector2[y],mica,GOINFO)
}
}
return(ssm)
}
BMA <- function(SimScores){
return(sum( apply(SimScores, 1, max, na.rm=TRUE),
apply(SimScores, 2, max, na.rm=TRUE)
) / sum(dim(SimScores)))
}
rcmax <- function(SimScores){
rowScore <- mean(apply(SimScores, 1, max, na.rm=TRUE))
colScore <- mean(apply(SimScores, 2, max, na.rm=TRUE))
return(max(rowScore, colScore))
}
save("semantic_similarity.Rd")
save.image("~/Documents/UPSC_project/Fg_courses/semantic_similarity.RData")
load("~/Documents/UPSC_project/Fg_courses/semantic_similarity.RData")
at1g73190 <- c("GO:0000326",
"GO:0005215",
"GO:0006810",
"GO:0006914",
"GO:0009705",
"GO:0015250",
"GO:0016020",
"GO:0042807")
at5g18290 <-c("GO:0005215",
"GO:0005783",
"GO:0006810",
"GO:0015250",
"GO:0016020")
t<-mSemSim( at1g73190,at5g18290,GOINFO)
GOINFO <- computeIC()
t<-mSemSim( at1g73190,at5g18290,GOINFO)
mostInfoTerm <- function(termVector, GOINFO){
ics <- unlist(lapply(termVector, function(x){
return(GOINFO$ics[[x]])
}))
print(ics)
names(ics) <- termVector
return(names(ics[which.max(ics)]))
}
t<-mSemSim(go1 ,go2,GOINFO)
t<-mSemSim( at1g73190,at5g18290,GOINFO)
mostInfoTerm <- function(termVector, GOINFO){
ics <- unlist(lapply(termVector, function(x){
return(GOINFO$ics[[x]])
}))
names(ics) <- termVector
return(names(ics[which.max(ics)]))
}
computeIC <- function(){
require(GO.db)
terms <- as.list(GOTERM)
listOnt <- list()
listOnt[["MF"]] <-  as.list(GOMFOFFSPRING)
listOnt[["BP"]] <-  as.list(GOBPOFFSPRING)
listOnt[["CC"]] <-  as.list(GOCCOFFSPRING)
topProb <- list()
mf.terms <- listOnt[["MF"]][["GO:0003674"]]
bp.terms <- listOnt[["BP"]][["GO:0008150"]]
cc.terms <- listOnt[["CC"]][["GO:0005575"]]
topProb[["MF"]]  = log(length(mf.terms))
topProb[["BP"]]  = log(length(bp.terms))
topProb[["CC"]]  = log(length(cc.terms))
icL <- lapply(terms, function(x){
res = 1 - log(length(listOnt[[x@Ontology]][[x@GOID]]))/topProb[[x@Ontology]]
return(res)
})
GOINFO <- list("description" = terms, "ics"=icL)
return(GOINFO)
}
lin.similarity <- function(term1, term2, mica, GOINFO){
if(is.null(mica)){
return(0)
}else{
return(2*GOINFO$ics[[mica]]/(GOINFO$ics[[term1]]+GOINFO$ics[[term2]]))
}
}
mostInfoTerm <- function(termVector, GOINFO){
ics <- unlist(lapply(termVector, function(x){
return(GOINFO$ics[[x]])
}))
names(ics) <- termVector
return(names(ics[which.max(ics)]))
}
mSemSim <- function(termVector1, termVector2, GOINFO){
require(GO.db)
listOnt <- list()
listOnt[["MF"]] <-  as.list(GOMFANCESTOR)
listOnt[["BP"]] <-  as.list(GOBPANCESTOR)
listOnt[["CC"]] <-  as.list(GOCCANCESTOR)
ssm <- matrix(nrow=length(termVector1),ncol=length(termVector2))
row.names(ssm)=termVector1
colnames(ssm)=termVector2
for(x in 1:length(termVector1)){
anc1 <- listOnt[[GOINFO$description[[termVector1[x]]]@Ontology]][[termVector1[x]]]
anc1 <- anc1[anc1!="all"]
anc1 <- c(anc1,termVector1)
for(y in 1:length(termVector2)){
if(GOINFO$description[[termVector2[y]]]@Ontology==GOINFO$description[[termVector1[x]]]@Ontology){
common <- anc1[anc1%in%c(listOnt[[GOINFO$description[[termVector2[y]]]@Ontology]][[termVector2[y]]], termVector2[y])]
mica <- mostInfoTerm(common,GOINFO)
ssm[x,y] = lin.similarity(termVector1[x],termVector2[y],mica,GOINFO)
}
else{
ssm[x,y] = 0
}
}
}
return(ssm)
}
BMA <- function(SimScores){
return(sum( apply(SimScores, 1, max, na.rm=TRUE),
apply(SimScores, 2, max, na.rm=TRUE)
) / sum(dim(SimScores)))
}
rcmax <- function(SimScores){
rowScore <- mean(apply(SimScores, 1, max, na.rm=TRUE))
colScore <- mean(apply(SimScores, 2, max, na.rm=TRUE))
return(max(rowScore, colScore))
}
save.image("~/Documents/UPSC_project/Fg_courses/semantic_similarity.RData")
at1g73190 <- c("GO:0000326",
"GO:0005215",
"GO:0006810",
"GO:0006914",
"GO:0009705",
"GO:0015250",
"GO:0016020",
"GO:0042807")
at5g18290 <-c("GO:0005215",
"GO:0005783",
"GO:0006810",
"GO:0015250",
"GO:0016020")
t<-mSemSim( at1g73190,at5g18290,GOINFO)
GOINFO <- computeIC()
t<-mSemSim( at1g73190,at5g18290,GOINFO)
t
BMA(t)
termVector1 = at1g73190
termVector2 =
at5g18290
x = 1
y = 4
require(GO.db)
listOnt <- list()
listOnt[["MF"]] <-  as.list(GOMFANCESTOR)
listOnt[["BP"]] <-  as.list(GOBPANCESTOR)
listOnt[["CC"]] <-  as.list(GOCCANCESTOR)
ssm <- matrix(nrow=length(termVector1),ncol=length(termVector2))
anc1 <- listOnt[[GOINFO$description[[termVector1[x]]]@Ontology]][[termVector1[x]]]
anc1
row.names(ssm)=termVector1
colnames(ssm)=termVector2
anc1 <- anc1[anc1!="all"]
anc1 <- c(anc1,termVector1)
anc1
anc1 <- listOnt[[GOINFO$description[[termVector1[x]]]@Ontology]][[termVector1[x]]]
anc1 <- anc1[anc1!="all"]
anc1 <- c(anc1,termVector1[x])
anc1
common <- anc1[anc1%in%c(listOnt[[GOINFO$description[[termVector2[y]]]@Ontology]][[termVector2[y]]], termVector2[y])]
common
mSemSim <- function(termVector1, termVector2, GOINFO){
require(GO.db)
listOnt <- list()
listOnt[["MF"]] <-  as.list(GOMFANCESTOR)
listOnt[["BP"]] <-  as.list(GOBPANCESTOR)
listOnt[["CC"]] <-  as.list(GOCCANCESTOR)
ssm <- matrix(nrow=length(termVector1),ncol=length(termVector2))
row.names(ssm)=termVector1
colnames(ssm)=termVector2
for(x in 1:length(termVector1)){
anc1 <- listOnt[[GOINFO$description[[termVector1[x]]]@Ontology]][[termVector1[x]]]
anc1 <- anc1[anc1!="all"]
anc1 <- c(anc1,termVector1[x])
for(y in 1:length(termVector2)){
if(GOINFO$description[[termVector2[y]]]@Ontology==GOINFO$description[[termVector1[x]]]@Ontology){
common <- anc1[anc1%in%c(listOnt[[GOINFO$description[[termVector2[y]]]@Ontology]][[termVector2[y]]], termVector2[y])]
mica <- mostInfoTerm(common,GOINFO)
ssm[x,y] = lin.similarity(termVector1[x],termVector2[y],mica,GOINFO)
}
else{
ssm[x,y] = 0
}
}
}
return(ssm)
}
at1g73190 <- c("GO:0000326",
"GO:0005215",
"GO:0006810",
"GO:0006914",
"GO:0009705",
"GO:0015250",
"GO:0016020",
"GO:0042807")
at5g18290 <-c("GO:0005215",
"GO:0005783",
"GO:0006810",
"GO:0015250",
"GO:0016020")
t<-mSemSim( at1g73190,at5g18290,GOINFO)
t
BMA(t)
computeIC <- function(){
require(GO.db)
terms <- as.list(GOTERM)
listOnt <- list()
listOnt[["MF"]] <-  as.list(GOMFOFFSPRING)
listOnt[["BP"]] <-  as.list(GOBPOFFSPRING)
listOnt[["CC"]] <-  as.list(GOCCOFFSPRING)
topProb <- list()
mf.terms <- listOnt[["MF"]][["GO:0003674"]]
bp.terms <- listOnt[["BP"]][["GO:0008150"]]
cc.terms <- listOnt[["CC"]][["GO:0005575"]]
topProb[["MF"]]  = log(length(mf.terms))
topProb[["BP"]]  = log(length(bp.terms))
topProb[["CC"]]  = log(length(cc.terms))
icL <- lapply(terms, function(x){
res = 1 - log(length(listOnt[[x@Ontology]][[x@GOID]]))/topProb[[x@Ontology]]
return(res)
})
GOINFO <- list("description" = terms, "ics"=icL)
return(GOINFO)
}
lin.similarity <- function(term1, term2, mica, GOINFO){
if(is.null(mica)){
return(0)
}else{
return(2*GOINFO$ics[[mica]]/(GOINFO$ics[[term1]]+GOINFO$ics[[term2]]))
}
}
mostInfoTerm <- function(termVector, GOINFO){
ics <- unlist(lapply(termVector, function(x){
return(GOINFO$ics[[x]])
}))
names(ics) <- termVector
return(names(ics[which.max(ics)]))
}
mSemSim <- function(termVector1, termVector2, GOINFO){
require(GO.db)
listOnt <- list()
listOnt[["MF"]] <-  as.list(GOMFANCESTOR)
listOnt[["BP"]] <-  as.list(GOBPANCESTOR)
listOnt[["CC"]] <-  as.list(GOCCANCESTOR)
ssm <- matrix(nrow=length(termVector1),ncol=length(termVector2))
row.names(ssm)=termVector1
colnames(ssm)=termVector2
for(x in 1:length(termVector1)){
anc1 <- listOnt[[GOINFO$description[[termVector1[x]]]@Ontology]][[termVector1[x]]]
anc1 <- anc1[anc1!="all"]
anc1 <- c(anc1,termVector1[x])
for(y in 1:length(termVector2)){
if(GOINFO$description[[termVector2[y]]]@Ontology==GOINFO$description[[termVector1[x]]]@Ontology){
common <- anc1[anc1%in%c(listOnt[[GOINFO$description[[termVector2[y]]]@Ontology]][[termVector2[y]]], termVector2[y])]
mica <- mostInfoTerm(common,GOINFO)
ssm[x,y] = lin.similarity(termVector1[x],termVector2[y],mica,GOINFO)
}
else{
ssm[x,y] = 0
}
}
}
return(ssm)
}
BMA <- function(SimScores){
return(sum( apply(SimScores, 1, max, na.rm=TRUE),
apply(SimScores, 2, max, na.rm=TRUE)
) / sum(dim(SimScores)))
}
rcmax <- function(SimScores){
rowScore <- mean(apply(SimScores, 1, max, na.rm=TRUE))
colScore <- mean(apply(SimScores, 2, max, na.rm=TRUE))
return(max(rowScore, colScore))
}
save.image("~/Documents/UPSC_project/Fg_courses/semantic_similarity.RData")
GOINFO <- computeIC()
go1 = c("GO:0004022","GO:0004024","GO:0004174")
go2 = c("GO:0009055","GO:0005515")
t<-mSemSim(go1 ,go2,GOINFO)
BMA(t)
at1g73190 <- c("GO:0000326",
"GO:0005215",
"GO:0006810",
"GO:0006914",
"GO:0009705",
"GO:0015250",
"GO:0016020",
"GO:0042807")
at5g18290 <-c("GO:0005215",
"GO:0005783",
"GO:0006810",
"GO:0015250",
"GO:0016020")
t<-mSemSim( at1g73190,at5g18290,GOINFO)
BMA(t)
library(ggplot2)
library(reshape2)
melt
melt(t)
t.melt <- melt(t)
ggplot(t.melt, aes(Var1, Var2, fill= variable)) +
geom_tile() +
scale_fill_gradient(low="white", high="blue") +
theme_ipsum()
ggplot(t.melt, aes(Var1, Var2, fill= variable)) +
geom_tile() +
scale_fill_gradient(low="white", high="blue") +
theme_classic()
t.melt
ggplot(t.melt, aes(Var1, Var2, fill= value)) +
geom_tile() +
scale_fill_gradient(low="white", high="blue") +
theme_classic()
ggplot(t.melt, aes(Var1, Var2, fill= value)) +
geom_tile() +
scale_fill_gradient(low="cyan", high="red") +
theme_classic()
ggplot(t.melt, aes(Var1, Var2, fill= value)) +
geom_tile() +
scale_fill_gradient(low="green", high="red") +
theme_classic()
ggplot(t.melt, aes(Var1, Var2, fill= value)) +
geom_tile() +
scale_fill_gradient(low="green", high="red")
ggplot(t.melt, aes(Var1, Var2, fill= value)) +
geom_tile() +
scale_fill_gradient(low="blue", high="red") +
theme_classic()
ggplot(t.melt, aes(Var1, Var2, fill= value)) +
geom_tile() +
scale_fill_gradient(low="white", high="red") +
theme_classic()
at1g73190 <- c("GO:0000326",
"GO:0005215",
"GO:0006810",
"GO:0006914",
"GO:0009705",
"GO:0015250",
"GO:0016020",
"GO:0042807")
at5g18290 <-c("GO:0005215",
"GO:0005783",
"GO:0006810",
"GO:0015250",
"GO:0016020")
t<-mSemSim( at1g73190,at5g18290,GOINFO)
BMA(t)
library(ggplot2)
library(reshape2)
t.melt <- melt(t)
ggplot(t.melt, aes(Var1, Var2, fill= value)) +
geom_tile() +
scale_fill_gradient(low="white", high="red") +
ylab("at5g18290 annotation") +
xlab("at1g73190 annotation")+
title(paste("BMA=",BMA(t)))
theme_classic()
ggplot(t.melt, aes(Var1, Var2, fill= value)) +
geom_tile() +
scale_fill_gradient(low="white", high="red") +
ylab("at5g18290 annotation") +
xlab("at1g73190 annotation")+
title(paste("BMA=",BMA(t)))+
theme_classic()
at1g73190 <- c("GO:0000326",
"GO:0005215",
"GO:0006810",
"GO:0006914",
"GO:0009705",
"GO:0015250",
"GO:0016020",
"GO:0042807")
at5g18290 <-c("GO:0005215",
"GO:0005783",
"GO:0006810",
"GO:0015250",
"GO:0016020")
t<-mSemSim( at1g73190,at5g18290,GOINFO)
BMA(t)
library(ggplot2)
library(reshape2)
t.melt <- melt(t)
ggplot(t.melt, aes(Var1, Var2, fill= value)) +
geom_tile() +
scale_fill_gradient(low="white", high="red") +
ylab("at5g18290 annotation") +
xlab("at1g73190 annotation")+
title(paste("BMA=",BMA(t)))+
theme_classic()
p<-ggplot(t.melt, aes(Var1, Var2, fill= value)) +
geom_tile() +
scale_fill_gradient(low="white", high="red") +
ylab("at5g18290 annotation") +
xlab("at1g73190 annotation")+
theme_classic()
p +  gtitle(paste("BMA=",BMA(t)))
p +  ggtitle(paste("BMA=",BMA(t)))
p +  ggtitle(paste("BMA=",round(BMA(t),3)))
library(rGSAn)
library(org.Mm.eg.db)
load(file = "08Cutoff_GSE99622_genesClusteringEntrez.Rdata")
load(file = "/home/aaron/Downloads/08Cutoff_GSE99622_genesClusteringEntrez.Rdata")
geneList1 = names(moduleLabels[which(moduleLabels==44)])
geneList2 = names(moduleLabels[which(moduleLabels==41)])
geneLists1
geneList1
go = getOntology()
goa = getGOAAnnotation(go, orgAnnot=org.Mm.egGO)
goa
goa[[geneList1]]
lapply(geneList1,function(x){return(goa[[x]])})
lapply(geneList1,function(x){return(goa[[x]][[x]])})
lapply(geneList1,function(x){return(goa[[x]])})
lapply(geneList1,function(x){return(is.null(goa[[x]])})
lapply(geneList1,function(x){return(is.null(goa[[x]]))})
unlist(lapply(geneList1,function(x){return(is.null(goa[[x]]))}))
unlist(lapply(geneList2,function(x){return(is.null(goa[[x]]))}))
res = rGSAnAnalysis(geneList2, go, goa)
